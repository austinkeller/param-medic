#!/usr/bin/env python
"""
Infer optimal parameter settings from an .mzML or .ms2 file
"""

import argparse
import logging
from datetime import datetime
from parammedic import errorcalc
from parammedic import ms2_io
from parammedic import mzml_io
from parammedic import __version__
import gzip

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2016 Damon May"
__license__ = "Apache 2.0"

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input .mzML or .ms2 file')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    parser.add_argument('--version', action='version', version='%(prog)s {version}'.format(version=__version__))
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below
        errorcalc.logger.setLevel(logging.DEBUG)

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    error_calculator = errorcalc.ErrorCalculator()

    for spectrum in generate_spectra(args.infile):
        error_calculator.process_spectrum(spectrum)

    (precursor_sigma_ppm, frag_sigma_ppm, frag_sigma_th,
     precursor_prediction_ppm, fragment_prediction_ppm, fragment_prediction_th) = \
        error_calculator.calc_masserror_dist()

    print('precursor ppm standard deviation: %f' % precursor_sigma_ppm)
    print('fragment standard deviation (Th): %f' % frag_sigma_th)
    print('fragment standard deviation (ppm): %f' % frag_sigma_ppm)
    print()

    print("Precursor error estimate (ppm): %.2f" % precursor_prediction_ppm)
    print("Fragment bin size estimate (Th): %.4f" % fragment_prediction_th)
    print("Fragment bin size estimate (ppm): %.2f" % fragment_prediction_ppm)

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))
    print("Done.")


def generate_spectra(spectra_file):
    """
    a generator for spectra from a .ms2 or .mzML file
    :param spectra_file:
    :return:
    """
    handle = spectra_file
    if spectra_file.name.endswith('.gz'):
        handle = gzip.open(spectra_file.name)
    if '.ms2' in spectra_file.name:
        io_module = ms2_io
    elif '.mzML' in spectra_file.name:
        io_module = mzml_io
    else:
        raise ValueError('generate_spectra, can\'t determine file type from name. Name=%s' % spectra_file.name)

    for spectrum in io_module.read_ms2_scans(handle):
        yield spectrum

main()
